// Variables
// -----------------------------------------------------------------------------
var NUM_POINTS = 350;
var CAMERA_FOV = 50;

// Functions
// -----------------------------------------------------------------------------

/**
 * sine function
 * @param {Numner} amplitude 
 * @param {Number} frequency 
 * @param {Number} phase 
 * @param {Number} t 
 */
function sine(amplitude, frequency, phase, t) {
	return amplitude * Math.sin(2 * Math.PI * frequency * t + phase);
}

/**
 * generate preset hills and valleys
 */
function hillsAndValleys() {
	var min = -17.5;
	var max = 17.5;
	var range = Math.abs(max - min);
	var numPointsEdge = NUM_POINTS;
	var increment = range/numPointsEdge;
	var vertices = [];

	for (var i = 0; i < numPointsEdge; i++) {
		for (var j = 0; j < numPointsEdge; j ++) {

			// get point coordinates in plane's coordinate system
			// in the plane coordinate system we are using z as the height for the height map
			var x = min + increment * i;
			var y = min + increment * j;

			// get height map / z
			var z = 0;
			z += sine( 0.5, 0.1, 0, x + y);
			z += sine( 0.4, 0.2, 0.5, x - y);
			z += sine( 0.2, 0.1, 0.2, x);
			z += sine( 0.5, 0.1, 0.3, y);
			z += sine(0.3,0.1,0.3,2 * x + 3 * y);

			vertices.push(new THREE.Vector3(x,y,z));
		}
	}

	return vertices;
}

/**
 *  triangulate a list of vertices that is spread uniformly generated by hillsAndValleys()
 * @param {Array of Number} vertices 
 */
function triangulateVertices(vertices) {

	var faces = []
	// hacky way of generating triangles because I know how the points are split, pretty standard
	for (var i = 0; i < NUM_POINTS - 1; i ++) {
		for (var j = 0; j < NUM_POINTS - 1; j ++) {

			var index = i * NUM_POINTS + j;
			// counter clockwise order
			faces.push(new THREE.Face3(index,index + NUM_POINTS,index + 1));
			faces.push(new THREE.Face3(index + 1,index + NUM_POINTS,index + 1 + NUM_POINTS));
		}
	}

	return faces;
}

/**
 * Get both the hill and valley point in the center
 * @param {Array of Number} vertices 
 */
function getLocalExtremaInCenter(vertices) {

	// local max and local min tracking variables
	var localMax = Number.MIN_SAFE_INTEGER;
	var localMaxIndex = 0;
	var localMin = Number.MAX_SAFE_INTEGER;
	var localMinIndex = 0;

	// approximate center area tracking variables
	var centerWidth = 50;
	var startRow = NUM_POINTS / 2 - centerWidth / 2;
	var endRow = startRow + centerWidth;

	// for each index in the approximate center area, get local min index and local max index
	for (var i = startRow; i < endRow; i++) {
		for (var j = startRow; j < endRow; j++) {

			// convert from rowXcol to index in vertices list
			var curIndex = i * 350 + j;

			// update local min and local max

			if (vertices[i] > localMax){
				localMaxIndex = i;
			}
	
			if (vertices[i] < localMin){
				localMinIndex = i;
			}
		}
	}

	return localMaxIndex, localMinIndex;
}

/**
 * My constructor for THREE.Geometry
 * @param {Array of Number} vertices 
 * @param {Array of THREE.Face3} faces 
 */
function geometryConstructorWrapper(vertices, faces) {
	var geometry = new THREE.Geometry();
	geometry.vertices = vertices;
	geometry.faces = faces;
	
	return geometry;
}

function getMatteMaterial() {
	var material = new THREE.MeshPhongMaterial( 
		{
			side: THREE.DoubleSide,
			shininess: 0,
			flatShading: false,
			wireframe: false,
			wireframeLinewidth: 1,
		} 
	);

	return material;
}

function getGlossyMaterial() {
	var material = new THREE.MeshPhongMaterial( 
		{
			side: THREE.DoubleSide,
			shininess: 51,
			flatShading: false,
			wireframe: false,
			wireframeLinewidth: 1,
		} 
	);

	return material;
}

function getTanFromDegrees(degrees) {
	return Math.tan(degrees * Math.PI / 180);
  }

/**
 * Retunrs the first light option, which is a directional light at a defined light slant
 * @param {*} lightSlant in degrees
 */
function getDirectionalLight(lightSlant) {
	var LIGHT_Z_DISTANCE = 6;
	var lightY = getTanFromDegrees(lightSlant) * LIGHT_Z_DISTANCE;

	var directionalLight = new THREE.DirectionalLight( 0xffffff, 0.5 );
	// target of directional light is (0,0,0) by default
	directionalLight.position.set( 0, lightY, LIGHT_Z_DISTANCE);

	return directionalLight;
}

/**
 * Returns default matlab lighting conditions
 */
function getMatlabLight() {
	var directionalLight = new THREE.DirectionalLight( 0xffffff, 0.5 );
	// target of directional light is (0,0,0) by default
	directionalLight.position.set( 1, 0, 1);

	return directionalLight;
}

/**
 * retuns list of 3 diffuse light sources colored red, green and blue
 */
function getMathematicaLights() {
	var redDirectionLight = new THREE.DirectionalLight( 0xff0000, 0.5 );
	redDirectionLight.position.set( 1, 0, 1);

	var greenDirectionLight = new THREE.DirectionalLight( 0x00ff00, 0.5 );
	greenDirectionLight.position.set( 1, 1, 1);

	var blueDirectionLight = new THREE.DirectionalLight( 0x0000ff, 0.5 );
	blueDirectionLight.position.set( 0, 1, 1);

	return [redDirectionLight, greenDirectionLight, blueDirectionLight];
}

/**
 * Generic scene generation function
 * @param {THREE.Mesh} mesh 
 * @param {Array of THREE.Light} lights 
 */
function generateScene(mesh, lights) {
	var scene = new THREE.Scene();
	var camera = new THREE.PerspectiveCamera( CAMERA_FOV, window.innerWidth / window.innerHeight, 0.1, 1000);
	var renderer = new THREE.WebGLRenderer();

	camera.position.set(0,0,53);
	renderer.setSize( window.innerWidth, window.innerHeight);

	// axis helper
	var axesHelper = new THREE.AxesHelper( 20 );
	scene.add( axesHelper );
	document.body.appendChild( renderer.domElement);

	// add our mesh
	scene.add(mesh);
	// need this for mesh plane to be visible
	mesh.geometry.computeVertexNormals();

	// add our lights
	for (var i = 0; i < lights.length; i ++) {
		scene.add(lights[i]);

		// debug light
		// var helper = new THREE.DirectionalLightHelper( lights[i], 5 ); 
		// scene.add( helper );
	}

	console.log(scene);
	console.log(camera);

	function animate() {
		requestAnimationFrame( animate );
		renderer.render( scene, camera );

		// plane.rotation.x += 0.01;
		// plane.rotation.y += 0.01;
	}
	animate();
}

function testGenerateScene() {
	var vertices = hillsAndValleys();
	var faces = triangulateVertices(vertices);
	var geometry = geometryConstructorWrapper(vertices, faces);
	var material = getGlossyMaterial();

	var mesh = new THREE.Mesh(geometry, material);
	mesh.rotation.set(15,0,0);

	var lights = [getDirectionalLight(60)];

	generateScene(mesh, lights);
}

// INIT

testGenerateScene();


// UI
// -----------------------------------------------------------------------------

// Event Listeners
// -----------------------------------------------------------------------------
// window.addEventListener( 'resize', onWindowResize, false );

// // remember these initial values
// // for window resize
// var tanFOV = Math.tan( ( ( Math.PI / 180 ) * CAMERA_FOV / 2 ) );
// var windowHeight = window.innerHeight;

// /**
//  * On window resize, properly scale our generated planes
//  * @param {*} event 
//  */
// function onWindowResize( event ) {

//     camera.aspect = window.innerWidth / window.innerHeight;
    
//     // adjust the FOV
//     camera.fov = ( 360 / Math.PI ) * Math.atan( tanFOV * ( window.innerHeight / windowHeight ) );
    
//     camera.updateProjectionMatrix();
//     camera.lookAt( scene.position );

//     renderer.setSize(window.innerWidth, window.innerHeight/2 );
//     renderer.render( scene, camera );
// }